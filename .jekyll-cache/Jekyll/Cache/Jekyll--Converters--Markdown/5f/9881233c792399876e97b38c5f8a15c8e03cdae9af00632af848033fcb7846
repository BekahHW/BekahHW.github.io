I"X<p>I like to think of associations as relationships. How is this model related to that model? If they met each other on the street, and their friend was there, how would they describe their relationship? The most common relationships are belongs_to, has_many, has_many, through:, and has_one. What do those even mean? I find the best way to understand relationships is through an example.</p>

<p>Right now, Iâ€™m working on a project for screenwriters. The purpose of the project is to allow the screenwriter to enter their project and to track query letters sent to agents. So first, I start with my models. I know Iâ€™ll need a user, but in this case, Iâ€™ll call that a screenwriter. Next, I want to make a screenplay model. That screenplay should have at least one genre, so Iâ€™ll create a genre model. Last, Iâ€™ll create an agent model.</p>

<p>Each of these models will have attributes, but Iâ€™m going to put that on hold for right now. Now, we want to determine what the associations are. Weâ€™ll tackle the easy ones first. A screenwriter doesnâ€™t want to have just one screenplay. They want to make a career out of it, so we know that a screenwriter has_many screenplays, or at least the potential to have many screenplays. But a screenplay belongs_to a screenwriter. (Now, of course, a screenplay can have more than one screenwriter, but in this case, weâ€™re going to consider a writing team as one unit.) A screenplay has_many genres, in the case of something thatâ€™s a drama and a comedy, or a romance and a comedy. A genre has_many: screenplays, since one screenplay canâ€™t just declare itself the owner of the action-adventure genre. And last, the screenplay has_one: agent. So these are the basic relationships, but we have to go a little deeper.</p>

<p>If a screenplay has a genre, and a screenplay belongs to a screenwriter, then thereâ€™s another relationship we have to add, right? Right. A screenwriter has_many: genres, through: :screenplay. See how that works? Iâ€™ve found that it can be very helpful to map this out on paper or using google draw or a similar tool. You start to naturally see the flow of information. So, if thatâ€™s the case, what else do we need to connect here? A genre has_many screenwriters, through: :screenplays. An agent does have_many genres, through: :screenplays as well, but I donâ€™t see that association necessarily being useful for what weâ€™re trying to accomplish unless we want to sort the screenplay genres that belong to an agent to see if thereâ€™s a particular genre the agent represents. The interesting thing about associations is that they arenâ€™t always straight forward. You have to think about the practicality of the situation, and what works for the user.</p>

<p>I want to point out that we have a natural join table here. This is where the two people meet and sit down so they can talk to each other. Our screenwriters have an association with an agent through a screenplay (screenwriter has_one agent, through: :screenplay; agent has_many screenwriters, through: :screenplays). The agent and the screenwriter meet at the screenplay table. So this is where they are joined together. This means that the screenplay table needs to have ids for both of these models on the table.</p>

<p>It wonâ€™t always be really clear what the associations are, and thatâ€™s ok. Take some time to map out some of the relationships until you get a feel for it. At the beginning of my Rails project, I had a hard time imagining what the relationships looked like, but by the end of the project I couldnâ€™t understand what I didnâ€™t understand about it. The more you do it, the more natural it becomes.</p>
:ET