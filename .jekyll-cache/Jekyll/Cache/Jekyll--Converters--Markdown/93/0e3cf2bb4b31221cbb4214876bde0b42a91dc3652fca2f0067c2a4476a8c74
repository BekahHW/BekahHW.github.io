I"~<p>Yep, I love puns. I probably love them more than I love coding, but that’s because I’ve spent my last ten years as an adjunct English instructor. Actually, I think that I really enjoyed learning some Solidity because of that background. Over the past couple of weeks, I’ve jumped from JavaScript to learning more about Crypto, specifically Ethereum and Solidity.</p>

<p>Prior to that time, I was vaguely aware of what Ethereum was. (If you’re interested, check out the <a href="https://github.com/ethereum/wiki/wiki/White-Paper ">white paper</a>.) But once I jumped into it, I found it made logical sense. What I was writing, I could conceptualize in my brain. And what could be more fun than learning about writing code by creating zombies? That’s right, zombies.</p>

<p><a href="https://cryptozombies.io">Crytozombies</a> is amazing because it not only breaks down the concepts that are important to writing a DApp, but it also challenges you to understand and build on each concept. One of the problems I find in tutorials is they lay out the code and how it should be written in the tutorial, and then it’s easy to copy and paste. You know you shouldn’t do it, but it’s quicker and you think you understand it. Here they might ask you to write a require statement, for example, and then give you the specifics, but you need to figure out how to put them in the right order. They are forcing you to actually think about what you’re doing. Prior to getting to this point, they explain what the require statement does (“makes it so that the function statement will throw an error if some condition is not true”) and then they give an example.</p>

<p>This was a great break from JavaScript, but lesson 6–which just came out this week–is also a good reminder that I need to get back to JavaScript, so I can build some cool DApps. I’ll be looking out for Cryptozombies level seven.</p>
:ET