<!-- ---
layout: null
---
<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator>
  <link href="http://localhost:4000/author/Bekah/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2025-05-06T19:06:27-04:00</updated>
  <id>http://localhost:4000/author/Bekah/feed.xml</id>

  
  
  

  
    <title type="html">BekahHW | </title>
  

  
    <subtitle>Code. Community. Feelings. It's all here.</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Reciprocity Intelligence: A Core Skill for Modern Work</title>
      <link href="http://localhost:4000/reciprocity-intelligence" rel="alternate" type="text/html" title="Reciprocity Intelligence: A Core Skill for Modern Work" />
      <published>2025-04-15T00:00:00-04:00</published>
      <updated>2025-04-15T00:00:00-04:00</updated>
      <id>http://localhost:4000/reciprocity-intelligence</id>
      <content type="html" xml:base="http://localhost:4000/reciprocity-intelligence">&lt;p&gt;&lt;em&gt;In this second post of my series on giving and taking, I explore why reciprocity intelligence—the ability to navigate giving and receiving effectively—isn’t just nice to have anymore. If you missed the first post, &lt;a href=&quot;https://bekahhw.com/company-culture-of-reciprocity&quot;&gt;start here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;we-dont-talk-aboutreciprocity-intelligence-but-we-should&quot;&gt;We Don’t Talk about…Reciprocity Intelligence (but we should)&lt;/h2&gt;

&lt;p&gt;I’ve always been drawn to the idea that core skills like empathy, communication, and resilience aren’t fixed skills, but learnable ones. You also might know them as “intelligences”: emotional intelligence, cultural intelligence, and even digital intelligence. Basically, they shape how we understand and navigate relationships and environments.&lt;/p&gt;

&lt;p&gt;But there’s one form of intelligence I don’t hear people talking about even though it defines how we operate in teams and communities: reciprocity intelligence.&lt;/p&gt;

&lt;p&gt;Reciprocity intelligence is the ability to move skillfully between giving and receiving. It’s knowing when to offer help, when to ask for it, and how to manage the emotions that come with both. It’s recognizing that generosity is situational and not a permanent identity. You’re not always a “giver” or a “taker.” You shift based on your capacity, your context, and your needs.&lt;/p&gt;

&lt;p&gt;The good news is that like any intelligence, reciprocity intelligence is something you can grow.&lt;/p&gt;

&lt;h2 id=&quot;the-research-behind-reciprocity-skills&quot;&gt;The Research Behind Reciprocity Skills&lt;/h2&gt;

&lt;p&gt;Although it’s not likely referred to as reciprocity intelligence, the concept is gaining attention in research that is focused on its underlying skills. For example, Grant and Dutton (2012) found that when people are encouraged to think about times they gave or received help, they’re more likely to keep that generosity going at work. Even small reflection prompts can lead to more giving and collaboration on teams.&lt;/p&gt;

&lt;p&gt;In the last twenty years, we’ve seen gratitude journaling become wildly popular. It should be no surprise that the focus is often on giving or receiving, and it has been proven to boost your mood and strengthen your relationships. These studies aren’t directly about reciprocity, but they show how simple reflection can spark more positive social behavior and help reduce stress.&lt;/p&gt;

&lt;p&gt;From the neuroscience angle, Harbaugh and his team (2007) used brain scans to show that giving to others lights up the brain’s reward centers. Generosity feels good. Voluntary giving seems to bring the biggest reward.&lt;/p&gt;

&lt;p&gt;And this isn’t a single culture thing either. Cross-cultural research from Henrich et al. (2005) shows the idea of reciprocity shows up in cultures all over the world, and is practiced in many different ways. So what we can take away from this is that reciprocity is universal, but the actual skills to navigate it are shaped by culture and can be taught.&lt;/p&gt;

&lt;h2 id=&quot;seasons-of-giving-and-taking&quot;&gt;Seasons of Giving and Taking&lt;/h2&gt;

&lt;p&gt;In my experience with &lt;a href=&quot;https://virtualcoffee.io/&quot;&gt;Virtual Coffee&lt;/a&gt; over the past five years, I’ve moved through distinct phases of giving and receiving. When I founded the community, I was primarily in a giving season and spent a lot of time organizing, mentoring, and speaking to early career developers. But eventually, I started to recognize the signs of burnout. This was also an opportunity to become a matcher or taker. I had to accept help, to allow others to contribute, to recognize that if I did it all on my own, I was on a fast-track to helping no one. I had to find that balance. And I needed to understand what that balance meant for me and take that knowledge and understanding with me to everything I did so I didn’t face burnout doing the things I love.&lt;/p&gt;

&lt;p&gt;This recognition, that we all move through seasons where we may give more or receive more, is central to reciprocity intelligence. The skill development means that you should be able to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Recognize your current season without shame or guilt&lt;/li&gt;
  &lt;li&gt;Communicate your capacity transparently&lt;/li&gt;
  &lt;li&gt;Build a “reciprocity bank” through consistent giving when able&lt;/li&gt;
  &lt;li&gt;Withdraw thoughtfully when needed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-hidden-costs-of-false-giving&quot;&gt;The Hidden Costs of False Giving&lt;/h2&gt;

&lt;p&gt;Maybe one of the most insidious challenges in workplace or community dynamics is what I call “false giving.” False giving is generosity theater. It looks like help, but it costs more than it contributes. And when it’s unchecked, it spreads by slowly draining the energy of the real contributors. Sometimes people “pass” as givers by volunteering. But when they deliver substandard work, it ultimately creates more work for others. What makes this particularly damaging is that it masquerades as contribution, offers support for the team/community, promises decreased workloads, etc. In reality, it takes value, time, and unplanned resources from your team. It becomes a virus that, if not addressed, can go deep into your veins and seriously damage your team’s health.&lt;/p&gt;

&lt;p&gt;Research on team dynamics and “social loafing” shows that when team members perceive others as not contributing, it can lead to frustration and resentment within the group (&lt;a href=&quot;https://ijip.in/wp-content/uploads/2024/07/18.01.375.20241202.pdf&quot;&gt;Social Loafing and Its Effects on the Workplace&lt;/a&gt;).Teams generally function better and show more mutual respect when members are honest about their limitations and boundaries (for reference, check out: &lt;a href=&quot;https://rework.withgoogle.com/en/guides/understanding-team-effectiveness&quot;&gt;Understand team
effectiveness&lt;/a&gt; and &lt;a href=&quot;https://www.vantagecircle.com/en/blog/team-dynamics/&quot;&gt;Team Dynamics: The Backbone of Effective Collaboration&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;have-the-hard-conversations&quot;&gt;Have the Hard Conversations&lt;/h2&gt;

&lt;p&gt;I’m a huge proponent of having hard conversations when you need to, and this especially applies to team dynamics. In the first year of Virtual Coffee, we read &lt;em&gt;Radical Candor&lt;/em&gt;, and it opened my mind to understand the disservice you do when you don’t give people honest and candid feedback. The fact is, when someone consistently takes without investing, it burns people out and damages relationships, teams, and communities. I’ve witnessed firsthand how just one or two chronic takers can deplete an entire team’s motivation.&lt;/p&gt;

&lt;p&gt;Reciprocity intelligence includes the ability to address imbalances directly. This is why it’s important to be able to give to others by having honest conversations about their impact. With this approach, you can better understand how to have that conversation in a way that makes clear what the boundaries of giving and taking are. Early conflict resolution can address giving and taking imbalances that create healthier team dynamics.&lt;/p&gt;

&lt;h2 id=&quot;developing-your-reciprocity-intelligence&quot;&gt;Developing Your Reciprocity Intelligence&lt;/h2&gt;

&lt;p&gt;I mentioned earlier that you can grow in reciprocity intelligence. That’s not helpful unless you know how. Based on both research and experience, here are some practical steps I think you can use to develop your reciprocity intelligence:&lt;/p&gt;

&lt;h3 id=&quot;practice-reciprocity-awareness&quot;&gt;Practice Reciprocity Awareness&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Track your giving and taking behaviors across different relationships&lt;/li&gt;
  &lt;li&gt;Notice which interactions energize versus deplete you&lt;/li&gt;
  &lt;li&gt;Identify your “giving strengths” (the types of contribution that come naturally).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, you might like taking someone a meal after they’ve had a child, but feel depleted when you have to organize three weeks’ worth of meals for them. Or maybe you enjoy pair programming with a junior developer, but creating a mentorship plan for junior developers felt exhausting.&lt;/p&gt;

&lt;p&gt;Being aware can help you restructure your giving to focus on your strengths.&lt;/p&gt;

&lt;h3 id=&quot;build-recovery-into-giving&quot;&gt;Build Recovery into Giving&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Set boundaries around your giving to prevent burnout&lt;/li&gt;
  &lt;li&gt;Schedule recovery time after intensive giving periods&lt;/li&gt;
  &lt;li&gt;Develop rituals that help you recharge your “giving battery”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might find that you need a 2-for-1 giving rule, where for every two giving activities you might need a recovery activity (reading, taking a walk, an evening without community responsibilities, etc.). Identify necessary boundaries to prevent burnout.&lt;/p&gt;

&lt;h3 id=&quot;learn-to-receive-gracefully&quot;&gt;Learn to Receive Gracefully&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Practice accepting help without feeling diminished&lt;/li&gt;
  &lt;li&gt;Express specific appreciation for support&lt;/li&gt;
  &lt;li&gt;Recognize that allowing others to give benefits them too&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes you need to practice saying “thank you,” instead of “I got this.” It’s also worth noting that when you allow others to help you, they might find joy in helping. You’re empowering them to be a giver in a way that energizes them.&lt;/p&gt;

&lt;h3 id=&quot;communicate-your-capacity&quot;&gt;Communicate Your Capacity&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Be transparent about your current giving capacity&lt;/li&gt;
  &lt;li&gt;Signal shifting capacity before reaching burnout&lt;/li&gt;
  &lt;li&gt;Frame limitations as temporary seasons rather than permanent states&lt;/li&gt;
  &lt;li&gt;Be specific about what you can and cannot handle so people don’t have to guess. You don’t have to offer explanations, but you do have to share that you need help.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A low-level way to communicate capacity is to implement a simple traffic light system: green means I have capacity to help, yellow means I’m at my limit but can handle quick questions or issues, and red means I need to focus on existing commitments or I’m at capacity. Visual cues help set expectations without requiring constant explanations.&lt;/p&gt;

&lt;h3 id=&quot;invest-in-reciprocity-education&quot;&gt;Invest in Reciprocity Education&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Provide team training on healthy giving and receiving (this also helps to set expectations)&lt;/li&gt;
  &lt;li&gt;Discuss reciprocity norms explicitly in your organization&lt;/li&gt;
  &lt;li&gt;Recognize and celebrate balanced contributors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anecdotally, I’ve seen givers doing the majority of giving year after year after year until they burnout in communities, as volunteers, on teams, and really any aspect of life. If you’re running a team, think about offering onboarding about reciprocity patterns or having quarterly retros that include a reciprocity patterns that allow for better knowledge sharing.&lt;/p&gt;

&lt;p&gt;When you cultivate reciprocity intelligence experience, you can lower burnout rates, create a more equitable distribution of effort, allow for stronger team cohesion, encourage greater innovation through psychological safety, and see a higher retention rate of top talent.&lt;/p&gt;

&lt;h2 id=&quot;a-personal-reflection&quot;&gt;A Personal Reflection&lt;/h2&gt;

&lt;p&gt;It can be hard as a giver to not give, especially if you’re used to giving to others who normally reciprocate. You want to believe everyone will be willing to give back, to send ripples out into the world, but that’s not always the case. The most sustainable communities and teams are those where reciprocity intelligence is valued as a core skill and where members understand the rhythm of giving and receiving that sustains us all.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the next post in this series, we’ll explore how to design systems and processes that naturally encourage balanced reciprocity rather than enabling chronic taking or burning out your most generous team or community members.&lt;/em&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Bekah Hawrot Weigel</name>
        
        
      </author>

      

      

      
        <summary type="html">In this second post of my series on giving and taking, I explore why reciprocity intelligence—the ability to navigate giving and receiving effectively—isn’t just nice to have anymore. If you missed the first post, start here.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">The Giving-Resilience Balance: Beyond Givers and Takers</title>
      <link href="http://localhost:4000/company-culture-of-reciprocity" rel="alternate" type="text/html" title="The Giving-Resilience Balance: Beyond Givers and Takers" />
      <published>2025-04-08T00:00:00-04:00</published>
      <updated>2025-04-08T00:00:00-04:00</updated>
      <id>http://localhost:4000/company-culture-of-reciprocity</id>
      <content type="html" xml:base="http://localhost:4000/company-culture-of-reciprocity">&lt;p&gt;&lt;em&gt;In today’s workplace, we need both a culture of contribution and the personal strength to thrive independently.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recently, I read Adam Grant’s “Give and Take.” His framework of givers, takers, and matchers gave really great insight into professional and community interactions. As I reflected on my own experiences, I thought that we might be creating systems that unintentionally cultivate dependency rather than balanced reciprocity.&lt;/p&gt;

&lt;p&gt;Grant’s research shows that givers often succeed in the long run, but only when they give strategically. What does a balanced approach looks like, then?&lt;/p&gt;

&lt;h2 id=&quot;beyond-binary-thinking&quot;&gt;Beyond Binary Thinking&lt;/h2&gt;

&lt;p&gt;The conversation around giving and taking often falls into an oversimplified binary: selfless contributors versus selfish extractors. Although this might be helpful in understanding, we all know that reality is more complex.&lt;/p&gt;

&lt;p&gt;As we examine the complexity, some of the things we need to consider are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Context&lt;/strong&gt; - When is giving appropriate versus when is self-reliance necessary?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Skill development&lt;/strong&gt; - How do we build both generosity and resilience simultaneously?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Systems design&lt;/strong&gt; - How can organizations encourage healthy giving without creating dependency?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-support-resilience-matrix&quot;&gt;The Support-Resilience Matrix&lt;/h2&gt;

&lt;p&gt;We often think about professional development along two axes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Low Resilience&lt;/th&gt;
      &lt;th&gt;High Resilience&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Low Support&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Struggle Zone&lt;/td&gt;
      &lt;td&gt;Rugged Individualism&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;High Support&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Dependency Zone&lt;/td&gt;
      &lt;td&gt;Thriving Zone&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The best results happen in the “Thriving Zone,” where people have support when they need it and the confidence to stand on their own when they don’t.&lt;/p&gt;

&lt;h2 id=&quot;cultivating-balanced-contributors&quot;&gt;Cultivating Balanced Contributors&lt;/h2&gt;

&lt;p&gt;To develop professionals or community members who thrive in this balanced space, we need approaches that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Teach effective help-seeking&lt;/strong&gt; - The ability to ask for appropriate support rather than expecting or demanding it. For example, a junior developer should learn to ask targeted questions &lt;em&gt;after&lt;/em&gt; attempting a solution, instead of waiting passively, demanding immediate answers, or asking general questions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Why it matters&lt;/em&gt;: This builds confidence, respect among peers, and a culture of learning and independence.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Build progressive challenges&lt;/strong&gt; - Gradually decreasing direct support as competence grows. For example, a new team member may start with detailed tickets and then gradually move to leading small features or mentoring others.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Why it matters&lt;/em&gt;: Team members can grow without being overwhelmed, with support being scaled back as skills improve. That also allows the support team to budget their time.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Recognize strategic giving&lt;/strong&gt; - Understanding when and how to contribute without burning out. This is especially useful in situations where more senior team members also act as mentors. For example, a senior engineer may avoid burnout by blocking out time weekly for mentorship and not compromising by going over or outside that time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Why it matters&lt;/em&gt;: Contributions are more likely to be sustainable and impactful. This is key to avoid exhaustion or resentment.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Develop reciprocity intelligence&lt;/strong&gt; - The awareness of give-take dynamics and how to navigate them strategically.  For example, if a team member notices they’ve been receiving more help than giving, they could initiate a peer support circle to balance the dynamic or look at new team/community members and offer to support them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Why it matters&lt;/em&gt;: Being aware of giving and receiving patterns helps build trust, equity, and stronger team relationships over time.&lt;/p&gt;

&lt;p&gt;In my experience building community and being on teams, the most impactful contributors weren’t necessarily “natural givers.” What set them apart was a thoughtful, strategic approach to contribution. They navigated the balance between support and self-reliance with intention.&lt;/p&gt;

&lt;h2 id=&quot;reimagining-professional-development&quot;&gt;Reimagining Professional Development&lt;/h2&gt;

&lt;p&gt;Having a balanced perspective, we need to reimagine how we approach professional development:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Mentorship programs&lt;/strong&gt; should gradually transition from high-support to high-autonomy. This requires a deliberate development of mentorship, expectation setting, and growth monitoring. The goal should be to equip mentees to eventually lead, support others, and navigate challenges on their own.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Feedback systems&lt;/strong&gt; that acknowledge contribution while encouraging independence. For example, instead of only praising helpfulness, celebrate moments when someone solved a complex issue independently or helped others develop their own solutions. This helps shift the focus from being the hero to building group resilience and problem-solving abilities.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Team structures&lt;/strong&gt; that rotate giving and receiving roles. No one should always be the helper or the one receiving support. When everyone has the opportunity to contribute and to learn, we encourage empathy, shared responsibility, and prevent burnout or stagnation. It’s worth noting that everyone has different strengths, so considering each person’s individual strengths may impact how you rotate roles or what roles people take on.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cultural norms&lt;/strong&gt; that celebrate both generosity and self-reliance. Leaders set the tone for the whole company, which means when they model healthy boundaries, thoughtful help-seeking, and strategic support, it gives permission for others to do the same. This top-down modeling is necessary for making balance a norm rather than an exception.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;moving-forward&quot;&gt;Moving Forward&lt;/h2&gt;

&lt;p&gt;Neither pure self-reliance nor complete dependency serves us well.&lt;/p&gt;

&lt;p&gt;By cultivating both giving cultures and personal resilience, we create the conditions for sustainable success—for individuals, teams, and organizations.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;This is the first in a series exploring the balance between support and resilience in modern professional environments. Next week, I’ll dive deeper into practical strategies for developing “reciprocity intelligence” in yourself and your team.&lt;/em&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Bekah Hawrot Weigel</name>
        
        
      </author>

      

      

      
        <summary type="html">In today’s workplace, we need both a culture of contribution and the personal strength to thrive independently.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Agents vs MCP: Is the AI Hype Shifting?</title>
      <link href="http://localhost:4000/agents-v-mcp" rel="alternate" type="text/html" title="Agents vs MCP: Is the AI Hype Shifting?" />
      <published>2025-04-07T00:00:00-04:00</published>
      <updated>2025-04-07T00:00:00-04:00</updated>
      <id>http://localhost:4000/agents-v-mcp</id>
      <content type="html" xml:base="http://localhost:4000/agents-v-mcp">&lt;p&gt;If you’ve been following AI developments at all over the last year, I’m sure you heard about how autonomous AI agents were the next big thing that was going to change the landscape. You might have also heard names like AutoGPT, BabyAGI, and CAMEL AI. These agents could loop through tasks, reflect, plan, and even decide which tools to use. It felt a little like magic or sci fi to be able to give them a goal and watch them figure things out.&lt;/p&gt;

&lt;p&gt;But if you’ve still been following along the AI train, you’ve probably started hearing about the next big thing called Model Context Protocol, or MCP.&lt;/p&gt;

&lt;p&gt;Is this going to overtake agents for the next big thing? How are they different than agents? This 101 post should give you a little more insight into agents and MCP and understand how they’ll continue to impact the AI landscape.&lt;/p&gt;

&lt;h2 id=&quot;intern-vs-assembly-line-a-metaphor&quot;&gt;Intern vs Assembly Line: A Metaphor&lt;/h2&gt;

&lt;p&gt;Since there are a lot of people talking about both of these, there’s no shortage of information, but let’s try to think of it in a practical way:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Agents are like highly capable assistants that can independently complete complex tasks when given clear roles, goals, and the right tools. Earlier versions felt like handing a vague task to a junior intern. Today’s agents like those built with CrewAI or LangGraph can function more like specialized team members in a workflow.&lt;/li&gt;
  &lt;li&gt;MCP are like giving a trained operator access to a tightly organized set of APIs and tools, with a clear understanding of how to use them. The system is grounded, predictable, and effective because it follows a well-defined communication protocol.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-are-agents&quot;&gt;What Are Agents?&lt;/h2&gt;

&lt;p&gt;Autonomous AI agents are systems that use AI to think, plan, and take actions on their own. They often use tools, remember what they’ve done, and reflect on their results to improve as they go. They typically use large language models (LLMs) to make decisions.&lt;/p&gt;

&lt;h3 id=&quot;agent-strengths&quot;&gt;Agent Strengths&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Great for exploration, ideation, and R&amp;amp;D&lt;/li&gt;
  &lt;li&gt;Can autonomously coordinate multiple tools and tasks&lt;/li&gt;
  &lt;li&gt;Modern frameworks (e.g. CrewAI) support reliable, role-based behavior and collaboration&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;weaknesses&quot;&gt;Weaknesses&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Still require clear prompts and setup to be effective&lt;/li&gt;
  &lt;li&gt;Debugging and transparency can be tricky&lt;/li&gt;
  &lt;li&gt;Costly when not tightly scoped&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;real-use-case-research-automation&quot;&gt;Real Use Case: Research Automation&lt;/h3&gt;

&lt;p&gt;Some developers have used agents to research new topics by instructing them to search the web, summarize sources, and provide reports. If you’re like me, you’ve probably done this and found that although the agent is confident, they’re often unreliable and provide outdated or even hallucinated content.&lt;/p&gt;

&lt;h4 id=&quot;agent-example-autogpt-for-seo-content-research&quot;&gt;Agent Example: AutoGPT for SEO Content Research&lt;/h4&gt;

&lt;p&gt;Let’s say a starup wants to generate a blog content plan based on competitor analysis and trending keywords. Instead of using a single, looping agent like AutoGPT, they use CrewAI to assign specific roles to multiple agents in a structured workflow:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DataFetcher Agent: Crawls top competitor blogs and pulls content.&lt;/li&gt;
  &lt;li&gt;KeywordAnalyzer Agent: Extracts trending SEO keywords from the collected content.&lt;/li&gt;
  &lt;li&gt;ContentStrategist Agent: Generates 10 article ideas tailored to the startup’s niche.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The system coordinates their work, uses APIs for data gathering, ensures reliable outputs, and assembles the results in a structured format—like a JSON file or database entry.&lt;/p&gt;

&lt;p&gt;Why does this still qualify as an agent-based approach?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Each agent has a defined role but operates autonomously within that scope.&lt;/li&gt;
  &lt;li&gt;Agents decide how to accomplish their task using available tools.&lt;/li&gt;
  &lt;li&gt;The system runs without step-by-step user intervention.&lt;/li&gt;
  &lt;li&gt;It’s modular, adaptable, and can evolve with more or fewer agents as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This structured take on agents is more reliable than early implementations like AutoGPT, but still retains the autonomy and flexibility that define agent-based systems.&lt;/p&gt;

&lt;h2 id=&quot;what-are-mcp&quot;&gt;What Are MCP?&lt;/h2&gt;

&lt;p&gt;Model Context Protocols (MCP) are standards that help AI models connect to real tools, data, and APIs in a reliable way. Instead of guessing, the model knows what tools it can use, what kind of data to expect, and how to respond with clean, structured output.&lt;/p&gt;

&lt;p&gt;MCP are all about giving the model clear rules for how to work with real-world systems and information.&lt;/p&gt;

&lt;h3 id=&quot;strengths&quot;&gt;Strengths&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Predictable and testable&lt;/li&gt;
  &lt;li&gt;Grounded in real-time or structured data&lt;/li&gt;
  &lt;li&gt;Designed for reliability in production&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;weaknesses-1&quot;&gt;Weaknesses&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Less flexible in ambiguous scenarios&lt;/li&gt;
  &lt;li&gt;Relies on well-defined schemas and system design&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;real-use-case-connecting-models-to-live-apis&quot;&gt;Real Use Case: Connecting Models to Live APIs&lt;/h3&gt;

&lt;p&gt;With MCP, a model can understand how to query an external weather API, get user-specific account info, or return a JSON object for further processing without the unpredictability of hallucinations.&lt;/p&gt;

&lt;h4 id=&quot;mcp-example-anthropics-model-context-protocol-for-travel-booking&quot;&gt;MCP Example: Anthropic’s Model Context Protocol for Travel Booking&lt;/h4&gt;

&lt;p&gt;Let’s say a travel app startup wants users to get real-time booking options through natural language without risking unreliable results. They use Claude with Model Context Protocol (MCP) to connect structured tools like a flight search API and hotel database.&lt;/p&gt;

&lt;p&gt;Here’s how it works:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The developer registers each tool with clear metadata: what it does, what input it expects, and what output it returns (FlightSearch, HotelAvailability, etc.).&lt;/li&gt;
  &lt;li&gt;Claude knows exactly how to interact with each tool without guesswork or hallucination.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;` User: “Find me a flight to Berlin next Friday and a hotel under $200 near Alexanderplatz.”`&lt;/p&gt;

&lt;p&gt;Claude parses the input, calls the right APIs, and responds with structured, programmatic output.&lt;/p&gt;

&lt;p&gt;Why is this an MCP approach?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The model operates within a predefined protocol and toolset.&lt;/li&gt;
  &lt;li&gt;It doesn’t choose its own path by following clear, reliable instructions.&lt;/li&gt;
  &lt;li&gt;The results are testable, repeatable, and safe for production environments.&lt;/li&gt;
  &lt;li&gt;It’s built for structure and reliability, not for exploring open-ended tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This makes MCP ideal for enterprise-scale use cases where accuracy, consistency, and control are more important than creative autonomy.&lt;/p&gt;

&lt;h2 id=&quot;agents-vs-mcp-side-by-side&quot;&gt;Agents vs MCP: Side-by-Side&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Feature&lt;/th&gt;
      &lt;th&gt;Agents&lt;/th&gt;
      &lt;th&gt;MCP (Model Context Protocols)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Autonomy&lt;/td&gt;
      &lt;td&gt;High&lt;/td&gt;
      &lt;td&gt;Low (Structured)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Predictability&lt;/td&gt;
      &lt;td&gt;Low&lt;/td&gt;
      &lt;td&gt;High&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Debuggability&lt;/td&gt;
      &lt;td&gt;Poor&lt;/td&gt;
      &lt;td&gt;Strong&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Best Use Case&lt;/td&gt;
      &lt;td&gt;Exploration, ideation&lt;/td&gt;
      &lt;td&gt;Live data access, production workflows&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hallucination Risk&lt;/td&gt;
      &lt;td&gt;High&lt;/td&gt;
      &lt;td&gt;Low&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost Efficiency&lt;/td&gt;
      &lt;td&gt;Low&lt;/td&gt;
      &lt;td&gt;High (due to fewer missteps)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Note: Agents today can use structured tools too—autonomy here refers to their ability to decide how and when to use them, versus MCP’s pre-defined pathways.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-shift-from-agents-to-mcp&quot;&gt;The Shift from Agents to MCP&lt;/h2&gt;

&lt;p&gt;There’s no doubt that agents have allowed us to do work faster and more efficiently, but most developers want tools that are reliable, testable, and scalable. MCP offer more of that structure by allowing models to function more like connected services. Because of this, they can access and return real information instead of improvising answers. MCP aren’t going to cause the death of agents, but we can think of it like maturing in the process of using language models in real-world applications.&lt;/p&gt;

&lt;h2 id=&quot;bonus-should-i-use-an-agent-or-model-context-protocol-mcp&quot;&gt;Bonus: Should I Use an Agent or Model Context Protocol (MCP)?&lt;/h2&gt;

&lt;p&gt;This is a very simiplified way to look at it, but hopefully if you’re still trying to figure this out, you might find some insight in the questions below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Is your goal quick experimentation or creative exploration?&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;✅ Yes → &lt;strong&gt;Use an Agent&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;❌ No → Next question&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Is this going into a production system?&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;✅ Yes → &lt;strong&gt;Use MCP&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;❌ No → Next question&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Do you need precise control over tool usage and structured output (like JSON or API calls)?&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;✅ Yes → &lt;strong&gt;Use MCP&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;❌ No → &lt;strong&gt;Use an Agent&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary:&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Situation&lt;/th&gt;
      &lt;th&gt;Use Agent&lt;/th&gt;
      &lt;th&gt;Use MCP&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Prototyping / R&amp;amp;D&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Needs structured, reliable output&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Calling multiple real-world APIs&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;You want fast, creative ideas&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Building a user-facing feature&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content>

      
      
      
      
      

      <author>
          <name>Bekah Hawrot Weigel</name>
        
        
      </author>

      

      

      
        <summary type="html">If you’ve been following AI developments at all over the last year, I’m sure you heard about how autonomous AI agents were the next big thing that was going to change the landscape. You might have also heard names like AutoGPT, BabyAGI, and CAMEL AI. These agents could loop through tasks, reflect, plan, and even decide which tools to use. It felt a little like magic or sci fi to be able to give them a goal and watch them figure things out.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Measuring the Impact of Developer Content: Metrics That Matter</title>
      <link href="http://localhost:4000/developer-content-metrics" rel="alternate" type="text/html" title="Measuring the Impact of Developer Content: Metrics That Matter" />
      <published>2025-03-31T00:00:00-04:00</published>
      <updated>2025-03-31T00:00:00-04:00</updated>
      <id>http://localhost:4000/developer-content-metrics</id>
      <content type="html" xml:base="http://localhost:4000/developer-content-metrics">&lt;p&gt;Last week, I was chatting with a Developer Advocate at Gitbook, and he asked me what metrics we looked at for docs at OpenSauced. The honest answer is that we didn’t have KPIs or OKRs or metrics that determined our success. Ultimately, our success was based on users being able to use the software and understand the value in the data we were exposing. Now, that doesn’t mean that I didn’t measure anything. It just means that we weren’t building dashboards to track progress. Ultimately, the metrics will depend on your team’s goals, but here are some of the things I think are valuable in identifying whether or not the docs I’m working on are successful.&lt;/p&gt;

&lt;h2 id=&quot;beyond-vanity-metrics-the-true-impact-of-developer-content&quot;&gt;Beyond Vanity Metrics: The True Impact of Developer Content&lt;/h2&gt;

&lt;p&gt;Traditional content metrics like page views and social shares can be useful, but they tell an incomplete story. There are three dimensions to Developer Content Value that I like to think of as we connect documentation to business outcomes:&lt;/p&gt;

&lt;h3 id=&quot;1-engagement-quality-of-interaction&quot;&gt;1. Engagement: Quality of Interaction&lt;/h3&gt;

&lt;p&gt;Surface-level engagement metrics tell you if developers are finding your content, but deeper metrics will show you if they’re actually succeeding with it.&lt;/p&gt;

&lt;h4 id=&quot;basic-metrics&quot;&gt;Basic Metrics:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Page views&lt;/li&gt;
  &lt;li&gt;Average time on page&lt;/li&gt;
  &lt;li&gt;Bounce rates&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;advanced-metrics&quot;&gt;Advanced Metrics:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Content completion rates: What percentage of developers complete multi-step tutorials?&lt;/li&gt;
  &lt;li&gt;Code example copy events: How often do developers copy sample code (indicates intent to implement)?&lt;/li&gt;
  &lt;li&gt;Documentation-to-implementation time: How quickly do developers move from reading docs to successful implementation?&lt;/li&gt;
  &lt;li&gt;Return visit patterns: How frequently do developers reference the same documentation (may indicate confusion or high value)?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-support-deflection-reducing-operational-costs&quot;&gt;2. Support Deflection: Reducing Operational Costs&lt;/h3&gt;

&lt;p&gt;Well-crafted developer content should impact support volume and complexity.&lt;/p&gt;

&lt;h4 id=&quot;key-metrics&quot;&gt;Key Metrics:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Support ticket reduction: Decrease in tickets related to documented topics&lt;/li&gt;
  &lt;li&gt;Question sophistication: Shift from basic “how to” questions to more advanced inquiries&lt;/li&gt;
  &lt;li&gt;Self-service resolution rates: Percentage of developers who resolve issues through documentation rather than support channels&lt;/li&gt;
  &lt;li&gt;Documentation referrals: How often support agents can resolve issues by linking to existing documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-product-adoption-driving-business-outcomes&quot;&gt;3. Product Adoption: Driving Business Outcomes&lt;/h3&gt;

&lt;p&gt;Ultimately, developer content should allow for successful product adoption and usage.&lt;/p&gt;

&lt;h4 id=&quot;key-metrics-1&quot;&gt;Key Metrics:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Documentation-influenced conversion: Conversion rates for users who engage with documentation vs. those who don’t&lt;/li&gt;
  &lt;li&gt;Feature adoption correlation: Relationship between documentation engagement and feature usage&lt;/li&gt;
  &lt;li&gt;Time-to-value: How quickly new developers reach their first success milestone&lt;/li&gt;
  &lt;li&gt;Retention impact: Differences in retention between developers who use documentation vs. those who don’t&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Documentation Instrumentation
To gather meaningful data, your documentation needs appropriate tracking:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Event-based analytics: Track specific interactions beyond page views (code copying, example expansion, etc.)&lt;/li&gt;
  &lt;li&gt;Documentation-to-product pathing: Follow user journeys from documentation to product implementation&lt;/li&gt;
  &lt;li&gt;Feedback mechanisms: Implement contextual feedback options ( “Was this helpful?” with follow-up options)&lt;/li&gt;
  &lt;li&gt;Search analytics: Track what developers search for, what they find, and what they do next&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;connecting-data-sources&quot;&gt;Connecting Data Sources&lt;/h3&gt;

&lt;p&gt;To understand whether or not your documentation is successful, you should consider how to connect it to other systems you’re tracking. For instance:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support ticket integration: Tag tickets with related documentation to identify gaps&lt;/li&gt;
  &lt;li&gt;Product usage correlation: Connect documentation engagement with feature adoption&lt;/li&gt;
  &lt;li&gt;Developer journey mapping: Track developer progression from documentation to implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not every team has the resources for comprehensive analytics, but you can start with minimal investment:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Implement basic document instrumentation
    &lt;ul&gt;
      &lt;li&gt;Add “Was this helpful?” widgets to key pages&lt;/li&gt;
      &lt;li&gt;Track code copying events&lt;/li&gt;
      &lt;li&gt;Monitor documentation search queries&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sample qualitative data
    &lt;ul&gt;
      &lt;li&gt;Review a subset of support tickets weekly to identify documentation gaps&lt;/li&gt;
      &lt;li&gt;Conduct monthly documentation interviews with developers&lt;/li&gt;
      &lt;li&gt;Add optional exit surveys when developers leave documentation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use proxy metrics
    &lt;ul&gt;
      &lt;li&gt;Monitor support volume for topics with new/updated documentation&lt;/li&gt;
      &lt;li&gt;Track time spent in documentation vs. successful API calls&lt;/li&gt;
      &lt;li&gt;Compare onboarding completion rates before and after documentation changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-contributor-journey-metrics&quot;&gt;The Contributor Journey Metrics&lt;/h2&gt;

&lt;p&gt;For open source projects, documentation is both an onboarding tool and a contributor pipeline. At OpenSauced, we partially looked at our documentation effectiveness through the “contribution ladder” metrics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First-time contributor conversion: Percentage of documentation readers who make their first contribution&lt;/li&gt;
  &lt;li&gt;Contributor retention: Rate at which contributors return to make additional contributions&lt;/li&gt;
  &lt;li&gt;Contribution progression: Movement of contributors through increasingly complex contribution types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At OpenSauced, we structured our documentation to create a clear progression path for contributors. New community members typically followed this journey:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Education path: Learning about open source and its purpose&lt;/li&gt;
  &lt;li&gt;Documentation contributions: Making their first contributions by improving our docs&lt;/li&gt;
  &lt;li&gt;App contributions: Eventually contributing to the core application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we look at this ladder, we can also see it from this perspective:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Awareness → Interest: How many people who discovered the project engaged with documentation&lt;/li&gt;
  &lt;li&gt;Interest → First Contribution: Conversion rate from students to first-time contributors&lt;/li&gt;
  &lt;li&gt;First Contribution → Repeat Contribution: Retention rate of contributors&lt;/li&gt;
  &lt;li&gt;Repeat → Core Contributor: Progression rate to becoming regular contributors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;last-thoughts&quot;&gt;Last Thoughts&lt;/h2&gt;

&lt;p&gt;Effective measurement isn’t about proving documentation’s worth in the abstract. You have to try to connect content directly to the metrics that matter to your organization. Whether that’s reducing support costs, accelerating adoption, or improving developer satisfaction, the right metrics framework can change the perception and value of your documentation.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Bekah Hawrot Weigel</name>
        
        
      </author>

      

      

      
        <summary type="html">Last week, I was chatting with a Developer Advocate at Gitbook, and he asked me what metrics we looked at for docs at OpenSauced. The honest answer is that we didn’t have KPIs or OKRs or metrics that determined our success. Ultimately, our success was based on users being able to use the software and understand the value in the data we were exposing. Now, that doesn’t mean that I didn’t measure anything. It just means that we weren’t building dashboards to track progress. Ultimately, the metrics will depend on your team’s goals, but here are some of the things I think are valuable in identifying whether or not the docs I’m working on are successful.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Common Pitfalls in Developer Content: The 7 Deadly Sins of Developer Documentation</title>
      <link href="http://localhost:4000/common-dev-content-pitfalls" rel="alternate" type="text/html" title="Common Pitfalls in Developer Content: The 7 Deadly Sins of Developer Documentation" />
      <published>2025-03-24T00:00:00-04:00</published>
      <updated>2025-03-24T00:00:00-04:00</updated>
      <id>http://localhost:4000/common-dev-content-pitfalls</id>
      <content type="html" xml:base="http://localhost:4000/common-dev-content-pitfalls">&lt;p&gt;Last week, I wrote about &lt;a href=&quot;https://bekahhw.com/Creating-Content-Developers-Love&quot;&gt;Content Developers Love&lt;/a&gt;, and it’s natural to follow that with some of the places where developer content goes wrong. It’s usually not one thing that causes documentation to go wrong; it can be death by a thousand papercuts. Learning how to recognize some of the common problems can keep your writing on track or help you catch it before the problem becomes too big.&lt;/p&gt;

&lt;h2 id=&quot;1-outdated-information-the-trust-killer&quot;&gt;1. Outdated Information: The Trust Killer&lt;/h2&gt;

&lt;p&gt;There’s only one path that outdated documentation leads to: frustration. Maintaining a large documentation base can be challenging to keep up, especially if there isn’t clear communication with engineering teams, but every effort should be made to keep documentation up to date with the current version of your product. Outdated documentation will decrease trust with your users, and that’s hard to rebuild.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Implement a systematic content review process tied to your release cycle. As part of this, you can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Version tag all code examples&lt;/li&gt;
  &lt;li&gt;Automate testing of any documentation code samples&lt;/li&gt;
  &lt;li&gt;Perform quarterly technical reviews of developer-facing content&lt;/li&gt;
  &lt;li&gt;Add Changelog links embedded within documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-missing-prerequisites-the-silent-blocker&quot;&gt;2. Missing Prerequisites: The Silent Blocker&lt;/h2&gt;

&lt;p&gt;Any content that assumes knowledge or setup that developers don’t have creates immediate friction. What’s obvious to you may be a complete mystery to someone new to your ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a “Before You Begin” checklist at the start of each tutorial&lt;/li&gt;
  &lt;li&gt;Clearly state prerequisites at the beginning of each piece of content&lt;/li&gt;
  &lt;li&gt;Provide links to resources that help developers meet these prerequisites&lt;/li&gt;
  &lt;li&gt;Test your content with developers who are new to your product&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the ways I like to think about approaching documentation is as “User 0”, meaning I’m the first person to go through the process, encounter the pitfalls, and document not just what works, but what didn’t, so that others don’t have to. You have to think like a user who’s engaging with the documentation for the first time, making sure the experience is intuitive, clear, and kind to anyone coming in fresh.&lt;/p&gt;

&lt;h2 id=&quot;3-undisclosed-limitations-the-hidden-trap&quot;&gt;3. Undisclosed Limitations: The Hidden Trap&lt;/h2&gt;

&lt;p&gt;Developers appreciate honesty about what your solution can’t do as much as clarity about what it can do. Nobody wants to feel “tricked” into thinking they can do something with your product only to find out that it can’t do that, takes substantial investment to implement a workaround, or it’s somewhere down the roadmap.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create dedicated “Limitations” or “Considerations” sections&lt;/li&gt;
  &lt;li&gt;Be transparent about edge cases and known issues&lt;/li&gt;
  &lt;li&gt;Offer workarounds when possible&lt;/li&gt;
  &lt;li&gt;Update limitation documentation as your product evolves&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-neglecting-the-why-the-context-gap&quot;&gt;4. Neglecting the “Why”: The Context Gap&lt;/h2&gt;

&lt;p&gt;Developers aren’t just implementing solutions, they’re making architectural decisions. They need to understand the reasoning behind recommendations to adapt them appropriately.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain the rationale behind design patterns or recommended approaches&lt;/li&gt;
  &lt;li&gt;Provide context for best practices rather than just stating them&lt;/li&gt;
  &lt;li&gt;Share trade-offs considered when making architectural recommendations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-tutorial-cliffs-the-abandonment-point&quot;&gt;5. Tutorial Cliffs: The Abandonment Point&lt;/h2&gt;

&lt;p&gt;One of the biggest gaps I’ve seen is that there’s a lot of great beginner (101-level) content and then a sharp jump to advanced (400-level) documentation. That creates a “tutorial cliff,” or a sudden drop in learning support.  Part of creating a good content library means filling in those gaps, including 100, 200, 300, &lt;em&gt;and&lt;/em&gt; 400 level content to support a variety of users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Map your content to a complete developer journey&lt;/li&gt;
  &lt;li&gt;Create explicit “next steps” at the end of introductory content&lt;/li&gt;
  &lt;li&gt;Build “intermediate” content that bridges tutorials and reference&lt;/li&gt;
  &lt;li&gt;Provide “recipe” style content for common implementation patterns&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-poor-organization-the-structure-problem&quot;&gt;6. Poor Organization: The Structure Problem&lt;/h2&gt;

&lt;p&gt;You can have the best, most comprehensive documentation, but if it’s poorly organized, developers won’t be able to use it effectively and are more likely to choose an alternative due to frustration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Organize content by both task and concept (dual navigation)&lt;/li&gt;
  &lt;li&gt;Create clear hierarchies with consistent depth and breadth&lt;/li&gt;
  &lt;li&gt;Use progressive disclosure (show users only the most essential information, but allow them to access more complex or detailed information through deliberate interaction like clicking, expanding, etc.) to prevent overwhelming users&lt;/li&gt;
  &lt;li&gt;Implement topic relationships and “see also” sections&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-missing-troubleshooting-guidance-the-dead-end-dilemma&quot;&gt;7. Missing Troubleshooting Guidance: The Dead-End Dilemma&lt;/h2&gt;

&lt;p&gt;When documentation only covers the happy path and doesn’t address common errors or problems, developers hit roadblocks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Incorporate error message explanations directly in documentation&lt;/li&gt;
  &lt;li&gt;Create dedicated troubleshooting sections for common failure points&lt;/li&gt;
  &lt;li&gt;Document known edge cases and their workarounds&lt;/li&gt;
  &lt;li&gt;Include debugging strategies specific to your platform&lt;/li&gt;
  &lt;li&gt;Analyze support tickets to identify and document recurring issues&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;turning-pitfalls-into-opportunities&quot;&gt;Turning Pitfalls into Opportunities&lt;/h2&gt;

&lt;p&gt;Each of these mistakes represents an opportunity to improve the developer experience. The good news? Most companies are making at least some of these errors, creating a competitive advantage for those who address them.&lt;/p&gt;

&lt;h2 id=&quot;an-actionable-approach-to-improvement&quot;&gt;An Actionable Approach to Improvement&lt;/h2&gt;

&lt;p&gt;If you’re looking to improve your developer content, start with this simple process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Audit:&lt;/strong&gt; Evaluate your current content against the pitfalls outlined above&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prioritize:&lt;/strong&gt; Identify the top 2-3 issues causing the most friction&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implement:&lt;/strong&gt; Make targeted improvements to address these specific pitfalls&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Measure:&lt;/strong&gt; Track the impact of your changes on developer satisfaction and product adoption&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Iterate:&lt;/strong&gt; Continuously refine based on feedback and changing needs&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;excellence-through-empathy&quot;&gt;Excellence Through Empathy&lt;/h2&gt;

&lt;p&gt;At its core, avoiding these pitfalls requires genuine empathy for your developer audience. By understanding their needs, frustrations, and workflows, you can create content that not only avoids common problems but also empowers developers to succeed with your product.&lt;/p&gt;

&lt;p&gt;Great developer documentation is both about technical accuracy and creating an experience that respects developers’ time, intelligence, and goals.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Bekah Hawrot Weigel</name>
        
        
      </author>

      

      

      
        <summary type="html">Last week, I wrote about Content Developers Love, and it’s natural to follow that with some of the places where developer content goes wrong. It’s usually not one thing that causes documentation to go wrong; it can be death by a thousand papercuts. Learning how to recognize some of the common problems can keep your writing on track or help you catch it before the problem becomes too big.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Adding Multiple Authors to my Astro Writing Blog: A Technical Walkthrough</title>
      <link href="http://localhost:4000/astro-content-collections" rel="alternate" type="text/html" title="Adding Multiple Authors to my Astro Writing Blog: A Technical Walkthrough" />
      <published>2025-03-18T00:00:00-04:00</published>
      <updated>2025-03-18T00:00:00-04:00</updated>
      <id>http://localhost:4000/astro-content-collections</id>
      <content type="html" xml:base="http://localhost:4000/astro-content-collections">&lt;p&gt;At the end of last year, my brothers and I wrote our first novel together (&lt;a href=&quot;https://dub.sh/b4c-astro&quot;&gt;The Battle for Christmas: Reign of the Nutcrackers&lt;/a&gt;). That experience inspired us to continue writing together, starting with a monthly newsletter with short stories. At this point, we decided we wanted a website. We had been using &lt;a href=&quot;https://kit.com/&quot;&gt;Kit&lt;/a&gt; to send emails, and we liked that functionality, but as our writing resumes grow, we also wanted to have a place where people could see all of our work, and this is where our Astro site came in.&lt;/p&gt;

&lt;p&gt;Now, I’ve been interested in checking out Astro for a while, but when I saw &lt;a href=&quot;https://luciacerchie.dev/&quot;&gt;Lucia Cerchie’s blog&lt;/a&gt; I fell in love with the Astro template (by &lt;a href=&quot;https://www.twitter.com/Charca&quot;&gt;Maxi Ferreira&lt;/a&gt;) she used. I decided to start there, but since this was a blog for me and both of my brothers, I would need to add functionality for multiple authors. Here’s how I did that.&lt;/p&gt;

&lt;h2 id=&quot;learning-the-hard-way-my-journey-to-astro-content-collections&quot;&gt;Learning the Hard Way: My Journey to Astro Content Collections&lt;/h2&gt;

&lt;p&gt;Before we get into it, I need to acknowledge that I started with a mistake. I did the thing I say not to do and I started without fully reading the documentation.&lt;/p&gt;

&lt;p&gt;When I first added multiple author functionality, I created a simple JavaScript file to manage author data:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;BekahHW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;BekahHW&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Bekah grew up in a storytelling-rich environment with her brothers...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/assets/bhw_headshot.jpg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;Josh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Josh&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Josh Hawrot is married to his inspiring wife Cruz...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/assets/josh.jpg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...another author&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I connected this to my blog posts using dynamic routes. Everything worked, and I didn’t think twice about it. And then a couple of days later, I was looking at Astro documentation, when I had my facepalm moment: the documentation clearly outlined a more structured, type-safe approach using collections that would make my content more maintainable and scalable. It’s worth noting that I was also using an older version of Astro, and updating to 5.5.3 gave me more functionality.&lt;/p&gt;

&lt;p&gt;From their docs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Content collections are the best way to manage sets of content in any Astro project. Collections help to organize and query your documents, enable Intellisense and type checking in your editor, and provide automatic TypeScript type-safety for all of your content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was exactly what I had needed, and I missed it because I hadn’t spent enough time in the docs. Let’s just say this is one of those lessons you remember.&lt;/p&gt;

&lt;p&gt;What I had &lt;em&gt;was&lt;/em&gt; working though, so why did I need to change?&lt;/p&gt;

&lt;h2 id=&quot;why-i-needed-to-change&quot;&gt;Why I Needed to Change&lt;/h2&gt;

&lt;p&gt;My original approach worked, but switching to Astro’s Content Collections API provided significant benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Schema validation&lt;/strong&gt;: Content collections automatically validate my data structure, preventing errors before they happen&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TypeScript integration&lt;/strong&gt;: I get autocompletion and type checking when working with author and blog data&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Structured content&lt;/strong&gt;: All data follows a consistent format, making it easier to maintain and extend&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Simplified queries&lt;/strong&gt;: The Collections API provides built-in methods for accessing content, eliminating custom filtering code&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Performance improvements&lt;/strong&gt;: Astro 5’s Content Layer API is specifically optimized for efficiency and scalability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, with Astro 5’s reference system, I can establish proper relationships between content types. For example, I can directly reference an author from a blog post using reference(“authors”) in the schema, which creates a clean, maintainable connection between content.&lt;/p&gt;

&lt;h2 id=&quot;migrating-to-astro-content-collections&quot;&gt;Migrating to Astro Content Collections&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Setting Up the Content Directory
First, I created the proper content directory structure:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/
├── content/
│   ├── config.ts  &amp;lt;- Configuration for all collections
│   ├── authors/
│   │   ├── Bekah.md
│   │   ├── Josh.md
│   │   └── Zach.md
│   └── blog/
│       └── my-blog-posts.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Defining Content Schemas&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The heart of content collections is the schema definition, which makes sure all your content follows a consistent structure:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/content/config.ts&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;astro:content&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;astro/loaders&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Define the schema for the authors collection&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;**/*.md&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./src/content/authors&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Define the schema for the blog collection&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;**/*.md&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./src/content/blog&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;publishDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Export the collections&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;Converting Author Data to Individual Files
I converted each author from my JS object to individual Markdown files:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Bekah&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;bio&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Bekah&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;grew&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;storytelling-rich&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;her&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;brothers,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;imagination&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;were&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;central&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;daily&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;life...&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/assets/bhw_headshot.jpg&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Fixing Author Name Capitalization in the Blog List View&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One issue I ran into was that the author name was appearing in all lowercase in the blog list view (/blog/). This happened because I was using the author ID (which is derived from filenames and always lowercase) instead of their actual name from the frontmatter. Here’s how I updated that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/pages/index.astro&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Fetch all author entries&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authorEntries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;authors&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAuthorName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authorId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authorEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authorId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authorId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fallback to ID if author not found&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BaseLayout&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Stories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sortedPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;post-item&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`/blog/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;post-item-author&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;By&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`/authors/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAuthorName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;post-item-date&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;—&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;publishDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/BaseLayout&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Updating Templates to Use Content Collections
Next, I refactored my blog and author pages to use the Content Collections API:
```js
—
// src/pages/blog/[slug].astro
import BaseLayout from ‘../../layouts/BaseLayout.astro’;
import Bio from ‘../../components/Bio.astro’;
import { getCollection, getEntry, render } from ‘astro:content’;
import ShareButtons from ‘../../components/ShareButtons.astro’;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;export async function getStaticPaths() {
try {
    const blogEntries = await getCollection(‘blog’);&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Create routes using entry ID
return blogEntries.map(post =&amp;gt; {
  console.log(`Creating route for ${post.id}`);
  return {
    params: { slug: post.id },
    props: { entryId: post.id },  // Just pass the ID
  };
});   } catch (error) {
console.error(&quot;Error in getStaticPaths:&quot;, error);
return [];   } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;// Get blog post data from props
const { entryId } = Astro.props;
const entry = await getEntry(‘blog’, entryId);&lt;/p&gt;

&lt;p&gt;if (!entry) {
  return Astro.redirect(‘/404’);
}&lt;/p&gt;

&lt;p&gt;// Render the content
const { Content } = await render(entry);
const allAuthors = await getCollection(‘authors’);
let author;
if (entry.data.author?.id) {
  try {
    author = await getEntry(‘authors’, entry.data.author.id);
    if (author) {
      console.log(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Found author for ${entry.data.author.id}&lt;/code&gt;);
    } else {
      console.error(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author not found: ${entry.data.author.id}&lt;/code&gt;);
    }
  } catch (error) {
    console.error(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Error fetching author: ${error.message}&lt;/code&gt;);
  }
}&lt;/p&gt;

&lt;h2 id=&quot;const-permalink--astrositehrefblogentryid&quot;&gt;const permalink = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${Astro.site.href}blog/${entry.id}&lt;/code&gt;;&lt;/h2&gt;

&lt;p&gt;&amp;lt;BaseLayout title={entry.data.title} description={entry.data.description} permalink={permalink} current=”blog”&amp;gt;&lt;/p&gt;
&lt;header&gt;
    &lt;p&gt;{entry.data.publishDate} ~ {entry.data.readingTime}&lt;/p&gt;
    &lt;h1&gt;{entry.data.title}&lt;/h1&gt;
    &lt;hr /&gt;
  &lt;/header&gt;
&lt;div class=&quot;container&quot;&gt;
    &lt;article class=&quot;content&quot;&gt;
      &lt;Content /&gt;
    &lt;/article&gt;
    &lt;hr /&gt;
    
    {author &amp;amp;&amp;amp; (
      &lt;div class=&quot;author-bio&quot;&gt;
        &lt;h3&gt;About the Author&lt;/h3&gt;
        &amp;lt;Bio 
          name={author.data.name}
          bio={author.data.bio}
          avatar={author.data.avatar}
        /&amp;gt;
      &lt;/div&gt;
    )}
    
    &amp;lt;ShareButtons title={entry.data.title} permalink={permalink} /&amp;gt;
  &lt;/div&gt;
&lt;p&gt;&amp;lt;/BaseLayout&amp;gt;
```
There are two things that I wanted to implement while working on this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;At the bottom of every short story, you see the author and their bio&lt;/li&gt;
  &lt;li&gt;When you click an author from the list view, you are taken to their page with links to all of their works.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both of those are fully functional on the site now.&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h2&gt;

&lt;p&gt;The good news is that I learned a lot during this project, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Read the documentation first: So much time and effort could have been saved&lt;/li&gt;
  &lt;li&gt;Use the platform’s built-in features: Modern frameworks like Astro provide powerful tools&lt;/li&gt;
  &lt;li&gt;Be willing to refactor: Sometimes you need to accept you’ve taken the wrong approach&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are still things that I need to work on for the site. The next priority is to improve the mobile view and responsiveness, but I’m happy to have it working. We already have two of our short stories up there attributed to the correct authors, and in a couple of weeks mine will be there too. You can check out our &lt;a href=&quot;https://dub.sh/siblings-write&quot;&gt;site&lt;/a&gt; now!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Bekah Hawrot Weigel</name>
        
        
      </author>

      

      

      
        <summary type="html">At the end of last year, my brothers and I wrote our first novel together (The Battle for Christmas: Reign of the Nutcrackers). That experience inspired us to continue writing together, starting with a monthly newsletter with short stories. At this point, we decided we wanted a website. We had been using Kit to send emails, and we liked that functionality, but as our writing resumes grow, we also wanted to have a place where people could see all of our work, and this is where our Astro site came in.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Creating Content Developers Love: A Guide to Developer Experience (DX) Content</title>
      <link href="http://localhost:4000/Creating-Content-Developers-Love" rel="alternate" type="text/html" title="Creating Content Developers Love: A Guide to Developer Experience (DX) Content" />
      <published>2025-03-17T00:00:00-04:00</published>
      <updated>2025-03-17T00:00:00-04:00</updated>
      <id>http://localhost:4000/Creating%20Content%20Developers%20Love</id>
      <content type="html" xml:base="http://localhost:4000/Creating-Content-Developers-Love">&lt;p&gt;Over the past couple of years, I’ve been in the middle of conversations about whether or not DevRel belongs in marketing. At the end of the day, I don’t know that it matters if you understand developers. One of the biggest pain points I’ve seen from marketing teams is understanding how to talk to developers, because, as we all know, developers are highly sensitive to feeling like they’ve been “marketed to.” What that really means is that they have high standards for the content they consume. Developers want to know that you understand the information. They want precision, depth, and utility.&lt;/p&gt;

&lt;p&gt;Last year, I saw a tweet from a team lead at a large company who said that they were working on choosing a new package for a feature they were working on. The number one reason they passed on some packages? Poor documentation and resources. Developers need to be able to understand how to use software so they can be effective as they create theirs. As I dive deeper into content creation targeting developers, I’m trying to find more ways to distill effective ways of presenting that content. In this post, I’m sharing how to present technical content to a technical audience.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-developer-mindset&quot;&gt;Understanding the Developer Mindset&lt;/h2&gt;

&lt;p&gt;Maybe the main skill a developer has is problem-solving. That’s because that’s what they do. Most of them aren’t asking the question, “What does your product do?” They’re asking, “How can this product help me to solve my current challenge?” When you create content that recognizes that ask,  you’re building credibility.&lt;/p&gt;

&lt;p&gt;There is never an end to the challenges developers have to solve. That’s why it’s important to value their time. You need to get to the point, create a scannable and well-structured hierarchy, and provide complete solutions without unnecessary stops. As part of that, you need to understand that they’re likely also looking for technical depth. They want the authors to understand not just how to implement something, but also why it needs to be implemented. If there are limitations, admit them. Don’t try to hide them.&lt;/p&gt;

&lt;h2 id=&quot;the-clear-framework-for-developer-content&quot;&gt;The CLEAR framework for Developer Content&lt;/h2&gt;

&lt;p&gt;There are a lot of ways that you can structure effective content, but sometimes it’s nice to have a framework to maintain consistency. Here are some takeaways from my experiences:&lt;/p&gt;

&lt;h3 id=&quot;c---code-first-examples&quot;&gt;C - Code-First Examples&lt;/h3&gt;

&lt;p&gt;Working code clearly communicates credibility to your audience. Ways to incorporate this could be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Functional code examples that could be copied and pasted&lt;/li&gt;
  &lt;li&gt;Explanations that followed the code, not preceded it&lt;/li&gt;
  &lt;li&gt;Real-world scenarios rather than contrived examples&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stripe is one of those companies that people point to as the standard for documentation. Their documentation leads with code examples, demonstrating both how the API works and how it responds to different inputs as well as common use cases.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Practical Tip&lt;/strong&gt;: Always test your code examples in an isolated environment before publishing. Nothing undermines credibility faster than sample code that doesn’t work as described.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;l---layered-complexity&quot;&gt;L - Layered Complexity&lt;/h3&gt;

&lt;p&gt;Great developer content acknowledges different knowledge levels by layering information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Entry points for new users and learners&lt;/li&gt;
  &lt;li&gt;Deeper technical details for experienced users&lt;/li&gt;
  &lt;li&gt;Advanced use cases and optimizations for experts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Twilio’s documentation does this exceptionally well, offering quick starts for beginners alongside detailed API references and more advanced tutorials for complex implementation scenarios.&lt;/p&gt;

&lt;h3 id=&quot;e---ecosystem-awareness&quot;&gt;E - Ecosystem Awareness&lt;/h3&gt;

&lt;p&gt;Great Developer Experience content acknowledges the broader ecosystem in which your product operates.&lt;/p&gt;

&lt;p&gt;Vercel’s Next.js documentation excels here, providing guidance on how Next.js interacts with various styling solutions, deployment platforms, and state management libraries.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Practical Tip&lt;/strong&gt;: Create integration guides for popular tools in your ecosystem. These high-value resources address real workflow challenges and demonstrate your understanding of the developer’s complete environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;a---accessible-terminology&quot;&gt;A - Accessible Terminology&lt;/h3&gt;

&lt;p&gt;While technical depth is important, you should avoid unnecessary jargon or marketing speak.&lt;/p&gt;

&lt;p&gt;Good developer content:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Defines terms clearly upon first use&lt;/li&gt;
  &lt;li&gt;Avoids acronyms without explanation&lt;/li&gt;
  &lt;li&gt;Uses consistent terminology throughout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When documenting complex concepts, I’ve found that starting with an analogy that relates to widely understood programming concepts can be useful. From there, you can transition to more specific terms.&lt;/p&gt;

&lt;h3 id=&quot;r---reproducible-workflows&quot;&gt;R - Reproducible Workflows&lt;/h3&gt;

&lt;p&gt;Developers need to understand not just isolated features but complete workflows. Content that connects the dots and shows how components work together in a reproducible process is invaluable.&lt;/p&gt;

&lt;p&gt;GitHub’s documentation on GitHub Actions demonstrates this principle well, walking developers through complete CI/CD workflows rather than just explaining individual actions in isolation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Practical Tip&lt;/strong&gt;: Structure tutorials as complete journeys with clear starting conditions and defined outcomes. Make sure developers can reproduce your examples with minimal setup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;developer-content-as-a-product&quot;&gt;Developer Content as a Product&lt;/h2&gt;

&lt;p&gt;The most successful companies treat developer content not as a marketing afterthought but as a product in itself that’s designed with specific user needs in mind, measured by meaningful metrics, and continuously improved based on feedback.&lt;/p&gt;

&lt;p&gt;Developers are among the most demanding content consumers, but also the most loyal when their needs are genuinely met. Great developer content doesn’t just support your product, it becomes one of your most valuable assets.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Bekah Hawrot Weigel</name>
        
        
      </author>

      

      

      
        <summary type="html">Over the past couple of years, I’ve been in the middle of conversations about whether or not DevRel belongs in marketing. At the end of the day, I don’t know that it matters if you understand developers. One of the biggest pain points I’ve seen from marketing teams is understanding how to talk to developers, because, as we all know, developers are highly sensitive to feeling like they’ve been “marketed to.” What that really means is that they have high standards for the content they consume. Developers want to know that you understand the information. They want precision, depth, and utility.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Content Strategy for Startups: Storytelling as a Growth Driver</title>
      <link href="http://localhost:4000/startup-content-strategy" rel="alternate" type="text/html" title="Content Strategy for Startups: Storytelling as a Growth Driver" />
      <published>2025-03-10T00:00:00-04:00</published>
      <updated>2025-03-10T00:00:00-04:00</updated>
      <id>http://localhost:4000/startup-content-strategy</id>
      <content type="html" xml:base="http://localhost:4000/startup-content-strategy">&lt;p&gt;It started with an air mattress on the floor of a San Francisco apartment.&lt;/p&gt;

&lt;p&gt;When Brian Chesky and Joe Gebbia couldn’t afford their rent in 2007, they purchased three air mattresses and created a simple WordPress website called “Air Bed &amp;amp; Breakfast,” renting the mattresses during a design conference when the hotels were sold out. That isn’t just the origin story of a company that would eventually be valued at over $100 billion. It’s a perfect example of how a compelling origin story can become a powerful asset.&lt;/p&gt;

&lt;p&gt;The most successful startups aren’t just building products; they’re telling stories that resonate, inspire, and drive growth.&lt;/p&gt;

&lt;h2 id=&quot;beyond-features-why-stories-drive-startup-growth&quot;&gt;Beyond Features: Why Stories Drive Startup Growth&lt;/h2&gt;

&lt;p&gt;I taught college English for ten years before coming into tech. And what I’ve learned about academic writing and tech content is that people and companies who tell the best stories often win the market.&lt;/p&gt;

&lt;p&gt;Think about how Figma moved from a niche design tool to an industry standard. Their storytelling centered around designers collaborating in real-time. By sharing stories of design teams achieving breakthrough moments together, they created emotional connections with their audience while showcasing product capabilities. Their collaboration and community narrative helped turn Figma into a $20 billion acquisition target and the go-to tool for design teams.&lt;/p&gt;

&lt;p&gt;Earlier today, I spoke with a startup founder who asked how people changed their minds on trying out a new technology. I told them that the strongest predictor of change I’ve noticed is when trusted individuals share how they’ve successfully used new technology. We’re naturally more inclined to trust those we know. That might be people we “know” online from their social media posts or people we know personally. When we have their recommendation or hear their story of how they’ve used the product, we’re more likely to trust the product.&lt;/p&gt;

&lt;p&gt;This little mantra captures the concept: features inform, but stories transform.&lt;/p&gt;

&lt;h2 id=&quot;the-idea-framework-a-strategic-approach-to-startup-content&quot;&gt;The IDEA Framework: A Strategic Approach to Startup Content&lt;/h2&gt;

&lt;p&gt;There are a lot of different frameworks out there, but I’ve combined a couple in a way that’s informed by my own experience bringing users to OpenSauced and years of content development. The IDEA framework connects storytelling to content as a growth-driver:&lt;/p&gt;

&lt;h3 id=&quot;i---inspire&quot;&gt;I - Inspire&lt;/h3&gt;

&lt;p&gt;Content needs to sparks curiosity and emotional connection. For startups, this might mean:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Origin stories that highlight your founding journey and the problem you’re solving&lt;/li&gt;
  &lt;li&gt;Vision stories that paint a picture of the world you’re helping create&lt;/li&gt;
  &lt;li&gt;Customer success narratives that let your users be the heroes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take the Spanx origin story from their &lt;a href=&quot;https://spanx.com/pages/about-us&quot;&gt;About Us page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SPANX founder Sara Blakely was getting ready for a party when she realized she didn’t have the right undergarment to provide a smooth look under white pants. Armed with scissors and sheer genius, she cut the feet off her control top pantyhose and the SPANX revolution began! With a focus on solving wardrobe woes, the SPANX brand has grown to offer bras, underwear, leggings, active and more. SPANX has secured its place in women’s hearts and in pop-culture with daily mentions everywhere from CNN to SNL.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The story captures the moment of inception and the expansion of the brand while demonstrating creativity.&lt;/p&gt;

&lt;p&gt;At OpenSauced, we saw continuous engagement when sharing stories of developers who found community through open source contribution. These narratives didn’t just showcase our platform, they inspired others to see what was possible.&lt;/p&gt;

&lt;h3 id=&quot;d---demonstrate&quot;&gt;D - Demonstrate&lt;/h3&gt;

&lt;p&gt;Inspiration catches your audience’s attention, but to keep them around you need to draw them deeper. This is where demonstration comes in. In this context, demonstration is showing your solution in action. Here are some ways you can do that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Case studies that walk through specific problems and solutions&lt;/li&gt;
  &lt;li&gt;Interactive tutorials that give users immediate wins&lt;/li&gt;
  &lt;li&gt;Comparative analyses that honestly position your offering&lt;/li&gt;
  &lt;li&gt;Community showcase that shows how real users have successfully used your product&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notion has perfected this approach by leveraging user stories to show the flexibility of their product. Instead of explaining features, they show real users from a variety of backgrounds and usecases and how they’ve built unique workflows. Authenticity is key here. Having examples that people trust from real users has helped pave the way for Notion’s explosive growth. Potential users can see themselves in the product through the stories of others.&lt;/p&gt;

&lt;p&gt;This content doesn’t just tell. It shows.&lt;/p&gt;

&lt;h3 id=&quot;e---educate&quot;&gt;E - Educate&lt;/h3&gt;

&lt;p&gt;Following my previous response to the startup founder, I told them how important it is to educate your audience. Education hugely impacts adoption, builds trust, and positions you as an authority. Here are some ways to effectively educate your audience:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Clear, well-organized, and up-to-date documentation&lt;/li&gt;
  &lt;li&gt;Resources that solve common pain points and show why your product is useful&lt;/li&gt;
  &lt;li&gt;Industry reports that share valuable insights&lt;/li&gt;
  &lt;li&gt;How-to content, quickstart guides, and tutorials that create immediate value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PostHog does an excellent job of educating users through their resources and their feature onboarding. Their comprehensive resources don’t just sell the product, they educate users to maximize their benefits.&lt;/p&gt;

&lt;p&gt;Educational content also creates a reciprocity loop: you give knowledge freely, and users return the favor with their attention and trust.&lt;/p&gt;

&lt;h3 id=&quot;a---activate&quot;&gt;A - Activate&lt;/h3&gt;

&lt;p&gt;All of this process builds to what most companies want: activating the audience to take meaningful action. Additional ways to activate the audience include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Community-building initiatives that encourage participation (hackathons, meetups, etc.)&lt;/li&gt;
  &lt;li&gt;Product adoption pathways that reduce friction (onboarding content)&lt;/li&gt;
  &lt;li&gt;Opportunities for your users to share with others (share button, downloadable assets, collaboration requests, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our most successful campaigns at OpenSauced weren’t just about sharing what new features we were shipping. They were about empowering our community to become advocates.&lt;/p&gt;

&lt;h2 id=&quot;the-storytelling-multiplier&quot;&gt;The Storytelling Multiplier&lt;/h2&gt;

&lt;p&gt;When you weave storytelling through each stage of the IDEA framework, your content gains what I like to call the “storytelling multiplier effect.” I wrote about how to incorporate good storytelling last week in, &lt;a href=&quot;https://bekahhw.com/Storytelling-in-Tech&quot;&gt;The Power of Storytelling in Tech Content&lt;/a&gt;. Ideally, you’re not just communicating a feature. You’re creating an emotional connection and demonstrating real-world impact. That’s when the storytelling multiplier works.&lt;/p&gt;

&lt;p&gt;Because humans are built for storytelling, we see clear ROIs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reduced education costs: Stories make complex concepts more accessible and memorable&lt;/li&gt;
  &lt;li&gt;Increased retention: Emotional connections encourage loyalty and reduce churn&lt;/li&gt;
  &lt;li&gt;Enhanced conversion: Narratives drive action more effectively than features and specifications&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implementing-storytelling-in-your-startups-content-strategy&quot;&gt;Implementing Storytelling in Your Startup’s Content Strategy&lt;/h2&gt;

&lt;p&gt;If you’re wondering where to start, here are a couple of things you can do:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Audit your current content&lt;/strong&gt;: Identify pieces that could be transformed with storytelling.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Collect narratives&lt;/strong&gt;: Systematically gather stories from customers, team members, and your founding journey.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Create story templates&lt;/strong&gt;: Develop frameworks that help your team consistently incorporate narrative elements.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Measure narrative engagement&lt;/strong&gt;: Look beyond standard metrics to measure how stories resonate (comment sentiment, sharing behavior, story recall).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;your-story-starts-now&quot;&gt;Your Story Starts Now&lt;/h2&gt;

&lt;p&gt;Every startup has stories worth telling. Stories of problems solved, of excited customers, of visions realized. These stories aren’t marketing assets; they’re growth drivers that can transform your content strategy from a cost center to a competitive advantage.&lt;/p&gt;

&lt;p&gt;Storytelling’s transforms transactional relationships into emotional connections.
In a world of information overload (especially AI-generated information), storytelling isn’t optional. It’s essential. The startups that understand this will not only capture attention but also build the emotional connections that drive sustainable growth.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Bekah Hawrot Weigel</name>
        
        
      </author>

      

      

      
        <summary type="html">It started with an air mattress on the floor of a San Francisco apartment.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">The Power of Storytelling in Tech Content</title>
      <link href="http://localhost:4000/Storytelling-in-Tech" rel="alternate" type="text/html" title="The Power of Storytelling in Tech Content" />
      <published>2025-03-05T00:00:00-05:00</published>
      <updated>2025-03-05T00:00:00-05:00</updated>
      <id>http://localhost:4000/Storytelling%20in%20Tech</id>
      <content type="html" xml:base="http://localhost:4000/Storytelling-in-Tech">&lt;p&gt;I’ve been thinking a lot about how storytelling sometimes gets lost or becomes an afterthought when we’re consumed by data, specifications, or writing content with AI. But in reality, it’s one of the most powerful tools we have, especially now. It creates emotional connections, makes complex ideas memorable, and establishes trust with our audience.&lt;/p&gt;

&lt;p&gt;If we want to engage our audience, influence decision-makers, or strengthen our brands, storytelling should play a key role.&lt;/p&gt;

&lt;h2 id=&quot;why-storytelling-works&quot;&gt;Why Storytelling Works&lt;/h2&gt;

&lt;h3 id=&quot;the-neuroscience-behind-stories&quot;&gt;The Neuroscience Behind Stories&lt;/h3&gt;

&lt;p&gt;Our brains are wired for storytelling. Neuroscience research shows that when we hear stories, multiple parts of our brain light up—not just the language-processing centers, but also areas responsible for emotions and memory. Paul J. Zak, a professor of neuroscience, found that stories that generate emotional connections trigger the release of oxytocin, a neurochemical that enhances trust and cooperation.&lt;/p&gt;

&lt;p&gt;In other words, when you tell a compelling story, your audience is more likely to trust you, remember your message, and take action.&lt;/p&gt;

&lt;h3 id=&quot;stories-make-tech-more-human&quot;&gt;Stories Make Tech More Human&lt;/h3&gt;

&lt;p&gt;People don’t connect with features; they connect with experiences. Take Warby Parker, for example. Their brand wasn’t built on just selling eyewear. It was built on a story of accessibility and innovation. It was built on the story of the struggle of a student who couldn’t afford glasses, the industry’s monopolization, and the company’s mission to create affordable, stylish eyewear.&lt;/p&gt;

&lt;p&gt;Similarly, think about how companies like OpenAI or GitHub frame their innovations. They don’t just talk about algorithms and infrastructure; they tell stories of empowerment, stories about how AI helps developers be more productive or how open source fosters collaboration.&lt;/p&gt;

&lt;h2 id=&quot;how-to-turn-dry-tech-content-into-a-compelling-story&quot;&gt;How to Turn Dry Tech Content into a Compelling Story&lt;/h2&gt;

&lt;p&gt;If you want to leverage storytelling in your tech content, here’s a three-step framework to help you get started:&lt;/p&gt;

&lt;h3 id=&quot;1-start-with-a-struggle-or-problem&quot;&gt;1. Start with a Struggle or Problem&lt;/h3&gt;

&lt;p&gt;Great stories begin with a problem or challenge. This could be the difficulty of managing distributed systems, the frustration of inefficient workflows, or the struggle of navigating an open source contribution for the first time.&lt;/p&gt;

&lt;p&gt;Example: Instead of saying, “Our new cloud solution optimizes deployment times,” start with a story:&lt;/p&gt;

&lt;p&gt;“It’s 2 AM. You get a call, jolting you awake and now you find yourself frantically debugging a failed deployment. This isn’t the first time this has happened, and you’re tired of another sleepless night. There has to be a better way…”&lt;/p&gt;

&lt;h3 id=&quot;2-show-the-transformation&quot;&gt;2. Show the Transformation&lt;/h3&gt;

&lt;p&gt;Introduce your solution as a turning point in the narrative. How does it solve the problem? How does it change the experience for the user?&lt;/p&gt;

&lt;p&gt;Example: Continuing the story:&lt;/p&gt;

&lt;p&gt;“After implementing our automated deployment tool, you finally got a full night’s sleep when you were on call. The next time an update went live, it was seamless, no more late-night firefighting.”&lt;/p&gt;

&lt;h3 id=&quot;3-end-with-a-resolution-and-impact&quot;&gt;3. End with a Resolution and Impact&lt;/h3&gt;

&lt;p&gt;Show the bigger picture. How does this solution contribute to success, productivity, or innovation?&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;“Today, your team ships code faster and with fewer errors. They focus on innovation rather than crisis management, because the best engineers aren’t the ones pulling all-nighters; they’re the ones solving real problems.”&lt;/p&gt;

&lt;h2 id=&quot;actionable-takeaway-apply-storytelling-to-your-tech-content&quot;&gt;Actionable Takeaway: Apply Storytelling to Your Tech Content&lt;/h2&gt;

&lt;p&gt;Here’s how you can start incorporating storytelling into your content:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Identify Your Audience’s Pain Points&lt;/strong&gt;: What struggles do they face? Talk to real users or analyze common complaints in your industry. (That’s right, you should actually talk to people who use your products.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Craft Narratives Around Those Challenges&lt;/strong&gt;: Frame your content like a journey, with real-world scenarios.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Use Emotion and Relatable Examples&lt;/strong&gt;: Whether it’s a developer, a manager, or an open source contributor, make your audience see themselves in the story.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Tech content shouldn’t just about features and data. It should be about making people feel something. When you tell a compelling story, you don’t just inform, you inspire.&lt;/p&gt;

&lt;p&gt;So the next time you’re drafting a case study, writing a blog, or presenting a product update, ask yourself: What’s the story here? Because the best tech writers aren’t just sharing information, they’re telling stories that people remember.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Bekah Hawrot Weigel</name>
        
        
      </author>

      

      

      
        <summary type="html">I’ve been thinking a lot about how storytelling sometimes gets lost or becomes an afterthought when we’re consumed by data, specifications, or writing content with AI. But in reality, it’s one of the most powerful tools we have, especially now. It creates emotional connections, makes complex ideas memorable, and establishes trust with our audience.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Google’s EEAT vs. Aristotle’s Rhetorical Triangle: SEO Is Just Ancient Rhetoric in Disguise</title>
      <link href="http://localhost:4000/Ai-and-content-creation" rel="alternate" type="text/html" title="Google’s EEAT vs. Aristotle’s Rhetorical Triangle: SEO Is Just Ancient Rhetoric in Disguise" />
      <published>2025-02-24T00:00:00-05:00</published>
      <updated>2025-02-24T00:00:00-05:00</updated>
      <id>http://localhost:4000/Ai-and-content-creation</id>
      <content type="html" xml:base="http://localhost:4000/Ai-and-content-creation">&lt;p&gt;Recently, I learned about Google’s EEAT (Experience, Expertise, Authoritativeness, Trustworthiness) framework. That’s the one that determines whether your content is worthy of showing up on search results or if it gets yeeted into the void of page two or beyond.&lt;/p&gt;

&lt;p&gt;The more I thought about it, the more I realized that EEAT is just Aristotle’s rhetorical triangle with an SEO-friendly name.&lt;/p&gt;

&lt;p&gt;The humor isn’t lost on me that same guy who spent his days philosophizing in ancient Greece (who I learned about in my Freshman Philosophy class) basically laid the groundwork for Google’s ranking algorithm. And if that doesn’t prove that everything in life is a remix, I don’t know what does.&lt;/p&gt;

&lt;p&gt;But let’s break this down in a way that is useable for content creators.&lt;/p&gt;

&lt;h2 id=&quot;what-is-eeat&quot;&gt;What Is EEAT?&lt;/h2&gt;
&lt;p&gt;In Google’s world, EEAT stands for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Experience&lt;/strong&gt; – Have you actually done the thing you’re writing about?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expertise&lt;/strong&gt; – Do you know your stuff?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authoritativeness&lt;/strong&gt; – Are you recognized as a legit source?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trustworthiness&lt;/strong&gt; – Can people rely on your content?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, if you’re writing about deep-sea welding, Google wants to make sure you’re not my 10 year old who just watched a YouTube video about it and decided, “Yeah, I could generate a bunch words on this using ChatGPT.”&lt;/p&gt;

&lt;h2 id=&quot;aristotles-rhetorical-triangle-the-og-eeat&quot;&gt;Aristotle’s Rhetorical Triangle: The OG EEAT&lt;/h2&gt;

&lt;p&gt;Long before Google existed (or the internet, or electricity, or deodorant), Aristotle defined the three pillars of persuasion:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Ethos (Credibility)&lt;/strong&gt; – Are you a trustworthy source?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Pathos (Emotion)&lt;/strong&gt; – Can you connect with people’s lived experiences?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logos (Logic)&lt;/strong&gt; – Do you have facts to back up what you’re saying?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sound familiar? That’s because it’s basically EEAT in a different era.&lt;/p&gt;

&lt;p&gt;Here’s how they match up:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;EEAT (Google)&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Aristotle’s Triangle&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Experience&lt;/strong&gt; (Have you actually done this?)&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Pathos&lt;/strong&gt; (Can you connect with real-life experiences?)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Expertise&lt;/strong&gt; (Do you understand the topic deeply?)&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Logos&lt;/strong&gt; (Do you have the knowledge and logic to back it up?)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Authoritativeness &amp;amp; Trustworthiness&lt;/strong&gt; (Are you credible and reliable?)&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Ethos&lt;/strong&gt; (Are you a respected and believable source?)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If Aristotle were alive today, he’d probably have a wildly successful blog, rank #1 on Google for How to Win an Argument, and be giving TED Talks about persuasion.&lt;/p&gt;

&lt;h2 id=&quot;seo-is-just-rhetoric-for-the-internet-age&quot;&gt;SEO Is Just Rhetoric for the Internet Age&lt;/h2&gt;

&lt;p&gt;The more you think about it, the more it makes sense. Google isn’t just rewarding well-researched content; it’s rewarding persuasive content.&lt;/p&gt;

&lt;p&gt;Just like Aristotle’s rhetoric, SEO is about:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Knowing your audience (Google calls this “search intent”)&lt;/li&gt;
  &lt;li&gt;Establishing credibility (Google calls this “authority”)&lt;/li&gt;
  &lt;li&gt;Making a strong case (Google calls this “quality content”)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of the day, writing for SEO is about being convincing, trustworthy, and valuable. Just like a good argument, or, a well-structured ancient Greek debate.&lt;/p&gt;

&lt;h2 id=&quot;what-does-this-mean-for-you&quot;&gt;What Does This Mean for You?&lt;/h2&gt;

&lt;p&gt;If you’re trying to write content that actually ranks, take a page from Google and Aristotle:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Share real experiences. (People can smell fake authority from a mile away.)&lt;/li&gt;
  &lt;li&gt;Back up your claims with solid knowledge. (Google loves receipts.)&lt;/li&gt;
  &lt;li&gt;Build credibility over time. (Trust isn’t built in a day.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But what’s most important, in my opinion? Write for people. Be engaging. Tell a story. Drop a joke now and then. Because at the end of the day, whether you’re Aristotle in 350 BCE or a content creator in 2025, the best way to win people over is to be real, be knowledgeable, and make it worth their time.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Bekah Hawrot Weigel</name>
        
        
      </author>

      

      

      
        <summary type="html">Recently, I learned about Google’s EEAT (Experience, Expertise, Authoritativeness, Trustworthiness) framework. That’s the one that determines whether your content is worthy of showing up on search results or if it gets yeeted into the void of page two or beyond.</summary>
      

      
      
    </entry>
  
</feed> -->
